// Задача
//
// 1. Пользователь вводит с клавиатуры последовательность целых чисел.
// 2. Точная длина последовательности заранее неизвестна.
// 3. Обычно последовательность состоит из 10-15 элементов, но может включать и 25 элементов.
// 4. Концом ввода последовательности является ввод числа 0.
// 5. Необходимо сохранить всю последовательность чисел до нуля и выполнить над ней ряд операций.
// 6.1 Вывести среднее арифметические последовательности чисел.
// 6.2 Вывести только нечетные числа из последовательности.
// 6.3 Вывести последовательность в обратном порядке.
// 7. Последовательность должна храниться в динамической памяти
// и занимать ровно то количество памяти, которое требуется для неё, 
// за исключением процесса ввода пользователем.
// 8. После всех обработок последовательность из памяти нужно удалить.

#include <iostream>

using namespace std;

void Average(float, int*, int);      //Метод нахождения среднего арифметического последовательности чисел (п. 6.1)

void Odd(int*, int);                 //Метод определения, вывода нечетных чисел в числовой последовательности (п. 6.2)

void Inverse(int*, int);             //Метод вывода числовой последовательности в обратном порядке (п. 6.3)

void dynArray()
{
	float fSum = 0;
	int iflag = 0;
	int iLength = 5;

	int* piArray;
	int* piArray1;
	piArray = new int[iLength];

	cout << "Enter array elements: ";
	for (size_t i = 0; i < iLength; i++)//Заполнение массива максимальной длины iLength;
	{								 //Заполнение массива максимальной длины iLength;
		cin >> *(piArray + i);		 //Заполнение массива максимальной длины iLength;
		if (piArray[i] == 0)
		{
			piArray1 = new int[iflag];		     //iflag = i
			for (size_t i = 0; i <= iflag; i++)     //Заполнение массива, включающего iflag элементов
			{								     //Заполнение массива, включающего iflag элементов
				*(piArray1 + i) = *(piArray + i);//Заполнение массива, включающего iflag элементов
			}								     //Заполнение массива, включающего iflag элементов
			delete[] piArray;

			Average(fSum, piArray1, iflag);
			Odd(piArray1, iflag);
			Inverse(piArray1, iflag);

			delete[] piArray1;//ОШИБКА ПРИ УДАЛЕНИИ!!!ОШИБКА ПРИ УДАЛЕНИИ!!!ОШИБКА ПРИ УДАЛЕНИИ!!!

			break;
		}
		iflag = i;					 //Конечное количество элементов массива, введенных пользователем

		if (i + 1 == iLength)
		{
			iLength *= 2;
			piArray1 = new int[iLength];
			for (size_t i = 0; i <= iflag; i++)
			{
				*(piArray1 + i) = *(piArray + i);
			}
			delete[] piArray;

			piArray = new int[iLength];
			for (size_t i = 0; i <= iflag; i++)
			{
				*(piArray + i) = *(piArray1 + i);
			}
			delete[] piArray1;
		}
	}
}

int main()
{
	dynArray();
	return 0;
}

void Average(float sum, int* arr, int length)//Метод нахождения среднего арифметического последовательности чисел (п. 6.1)
{
	cout << "AVERAGE: ";
	for (size_t i = 0; i <= length; i++)
	{
		sum += arr[i];
	}
	sum /= length + 1;//length + 1 - количество элементов массива
	cout << sum << "\n";
}

void Odd(int* arr, int length)//Метод определения, вывода нечетных чисел в числовой последовательности (п. 6.2)
{
	cout << "ODD: ";
	for (size_t i = 0; i <= length; i++)
	{
		if (arr[i] % 2 != 0)
		{
			cout << arr[i] << " ";
		}
	}
	cout << "\n";
}

void Inverse(int* arr, int length)//Метод вывода числовой последовательности в обратном порядке (п. 6.3)
{
	cout << "INVERSE: ";
	for (int i = length; i >= 0; i--)//int вместо size_t, чтобы избежать переполнения
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}